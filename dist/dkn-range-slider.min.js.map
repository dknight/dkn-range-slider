{"version":3,"sources":["dkn-range-slider.js"],"names":["DknRangeSlider","HTMLElement","[object Object]","super","this","connected","observedAttributes","CONTROL_ATTRS","concat","value","Number","control","setAttribute","dispatchEvent","Event","min","max","step","name","getAttribute","disabled","hasAttribute","removeAttribute","ticks","ticksStep","v","isNaN","labelValue","labelSuffix","labelPrefix","labelAccess","labelLimitMin","labelLimitMax","input","document","createElement","type","attributes","forEach","attr","indexOf","nodeName","nodeValue","label","classList","add","innerText","getLabelText","container","insertAdjacentElement","labelElem","p","style","setProperty","cWidth","getBoundingClientRect","width","thumbWidth","parseInt","getComputedStyle","getPropertyValue","left","klass","el","querySelector","val","remove","appendChild","RS_ID","addEventListener","e","target","field","updateLabel","ticksElem","i","tick","String","removeChild","oldValue","newValue","labelValueElem","createLabel","toggleLimLabel","removeTicks","createTicks","root","attachShadow","mode","styleElem","innerHTML","createCtrl","id","createOut","createLabelAccess","setTimeout","resizeHandler","window","attachHandlers","removeEventListener","customElements","define"],"mappings":"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","file":"dkn-range-slider.min.js","sourcesContent":["/*\n * {{REPO}}\n * @license {{LICENSE}}\n * @version {{VERSION}}\n*/\n/**\n * Custom range input based on web components API.\n * @author Dknight https://www.whoop.ee/\n * @class DknRangeSlider\n * @extends HTMLElement\n *\n * @property {string} [name=null] Proxy attribute to input[type=range].\n * This name is passed to form data.\n * @property {number} [value=50] Proxy attribute to input[type=range] value.\n * @property {number} [min=0] Proxy attribute to input[type=range] minimum.\n * @property {number} [max=0] Proxy attribute to input[type=range] maximum.\n * @property {number} [step=1] Proxy attribute to input[type=range] step.\n * @property {boolean} [disabled=false] Proxy attribute to input[type=range]\n * disabled. If enabled the value of range selector won't passed to form-data.\n * @property {boolean} [labelValue=''] Enables label related with thumb, usually\n * above thumb.\n * @property {string} [labelPrefix=''] Adds unit prefix for value's labels.\n * Eg. $100, Â¥100,\n * @property {string} [labelSuffix=''] Adds unit suffix for value's labels.\n * Eg. 100M, 10cm.\n * @property {string} [labelLimitMin=''] Labels for minimum label (usually on\n * the left side).\n * @property {string} [labelLimitMax=''] Labels for minimum label (usually on\n * the right side).\n * @property {string} [labelAccess=''] Accessibility label for range selector.\n * Screen reader should read this label when range selector has focus.\n * @property {boolean} [ticks=false] Enables ticks.\n * @property {number} [ticksStep=1] Override steps for ticks.\n */\nclass DknRangeSlider extends HTMLElement {\n  /**\n   * @constructor\n   */\n  constructor() {\n    super();\n    this.connected = false;\n  }\n  \n  /**\n   * Actual attributes for input[type=range] control.\n   * @type {Array<string>}\n   * @private\n   * @static\n   */\n  static CONTROL_ATTRS = ['value', 'min', 'max', 'step', 'name', 'disabled'];\n  \n  /**\n   * Range selector id.\n   * @type {string}\n   * @private\n   * @static\n   */\n  static RS_ID = 'rs';\n  \n  /**\n   * Observable attributes of web-component.\n   * @returns {Array<string>}\n   */\n  static get observedAttributes() {\n    return DknRangeSlider.CONTROL_ATTRS\n        .concat(['label-value', 'label-limit-min',\n            'label-limit-max', 'ticks', 'ticks-step']);\n  }\n  \n  /**\n   * Value getter.\n   * @returns {number}\n   */\n  get value() {\n    return Number(this.control.value);\n  }\n  \n  /**\n   * Value setter.\n   * @param {string | number} value\n   */\n  set value(value) {\n    this.setAttribute('value', value);\n    this.control.value = value;\n    this.dispatchEvent(new Event('change'));\n  }\n  \n  /**\n   * Min getter.\n   * @default 0\n   * @return {number}\n   */\n  get min() {\n    return Number(this.control.min) || 0;\n  }\n  \n  /**\n   * Min setter.\n   * @param {string | number} value\n   */\n  set min(value) {\n    this.setAttribute('min', value);\n    this.control.min = value;\n  }\n  \n  /**\n   * Max getter.\n   * @default 100\n   * @return {number}\n   */\n  get max() {\n    return Number(this.control.max) || 100;\n  }\n  \n  /**\n   * Max setter.\n   * @param {string | number} value\n   */\n  set max(value) {\n    this.setAttribute('max', value);\n    this.control.max = value;\n  }\n  \n  /**\n   * Step getter.\n   * @return {number}\n   */\n  get step() {\n    return Number(this.control.step) || 1;\n  }\n  \n  /**\n   * Step setter.\n   * @param {string | number} value\n   */\n  set step(value) {\n    this.setAttribute('step', value);\n    this.control.step = value;\n  }\n  \n  /**\n   * Step getter.\n   * @return {string}\n   */\n  get name() {\n    return this.getAttribute('name');\n  }\n  \n  /**\n   * Step setter.\n   * @param {string} value\n   */\n  set name(value) {\n    this.setAttribute('name', value);\n  }\n  \n  /**\n   * Disabled getter.\n   * @return {boolean}\n   */\n  get disabled() {\n    return this.hasAttribute('disabled');\n  }\n  \n  /**\n   * Disabled setter.\n   * @param {boolean} value\n   */\n  set disabled(value) {\n    value\n        ? this.setAttribute('disabled', '')\n        : this.removeAttribute('disabled');\n  }\n  \n  /**\n   * Ticks getter.\n   * @return {boolean}\n   */\n  get ticks() {\n    return this.hasAttribute('ticks');\n  }\n  \n  /**\n   * Disabled setter.\n   * @param {boolean} value\n   */\n  set ticks(value) {\n    value\n        ? this.setAttribute('ticks', '')\n        : this.removeAttribute('ticks');\n  }\n  \n  /**\n   * Ticks step getter.\n   * @return {number}\n   */\n  get ticksStep() {\n    let v = Number(this.getAttribute('ticks-step'));\n    return (Number.isNaN(v) || v <= 0) ? this.step : v;\n  }\n  \n  /**\n   * Ticks step setter.\n   * @param {string | number} value\n   */\n  set ticksStep(value) {\n    this.setAttribute('ticks-step', value);\n  }\n  \n  /**\n   * Checks is has attribute 'label-value'.\n   * @return {boolean}\n   */\n  get labelValue() {\n    return this.hasAttribute('label-value');\n  }\n  \n  /**\n   * Gets label suffix. You can set space before the suffix just\n   * setting the space before value. Like label-suffix=' EUR',\n   * will become '150 EUR'.\n   * @return {string|string}\n   */\n  get labelSuffix() {\n    return this.getAttribute('label-suffix') || '';\n  }\n  \n  /**\n   * Gets label prefix. You can set space after the suffix just\n   * setting the space before value. Like label-prefix='$ ',\n   * will become '$ 150'.\n   * @return {string | string}\n   */\n  get labelPrefix() {\n    return this.getAttribute('label-prefix') || '';\n  }\n  \n  /**\n   * Label for accessibility getter.\n   * @return {string}\n   */\n  get labelAccess() {\n    return this.getAttribute('label-access') || '';\n  }\n\n  /**\n   * Label for accessibility setter.\n   * @param {string} value\n   */\n  set labelAccess(value) {\n    return this.setAttribute('label-access', value);\n  }\n\n  /**\n   * Label limit min getter.\n   * @return {string}\n   */\n  get labelLimitMin() {\n    return this.getAttribute('label-limit-min') || '';\n  }\n\n    /**\n   * Label limit min setter.\n   * @param {string} value\n   */\n  set labelLimitMin(value) {\n    this.setAttribute('label-limit-min', value);\n  }\n  \n\n    /**\n   * Label limit max getter.\n   * @return {string}\n   */\n  get labelLimitMax() {\n    return this.getAttribute('label-limit-max') || '';\n  }\n\n  /**\n   * Label limit max setter.\n   * @param {string} value\n   */\n  set labelLimitMax(value) {\n    this.setAttribute('label-limit-max', value);\n  }\n  \n  /**\n   * Creates the HTMLInputElement control (input).\n   * @returns {HTMLInputElement}\n   * @private\n   */\n  createCtrl() {\n    const input = document.createElement('input');\n    input.type = 'range';\n    [...this.attributes].forEach((attr) => {\n      if (DknRangeSlider.CONTROL_ATTRS.indexOf(attr.nodeName) !== -1) {\n        input.setAttribute(attr.nodeName, attr.nodeValue);\n      }\n    });\n    return input;\n  }\n  \n  /**\n   * Create tracking label which is above thumb.\n   * @return {HTMLLabelElement}\n   */\n  createLabel() {\n    if (this.labelValue) {\n      const label = document.createElement('label');\n      label.classList.add('label-value');\n      label.innerText = this.getLabelText();\n      this.container.insertAdjacentElement('afterbegin', label);\n      this.labelElem = label;\n      return label;\n    }\n  }\n  \n  /**\n   * @private\n   * @param {string | number} value\n   */\n  updateLabel(value) {\n    const p = value / this.max * 100 + '%';\n    this.style.setProperty('--tx', p);\n    if (this.labelValue) {\n      this.labelElem.innerText = this.getLabelText();\n      const cWidth = this.container.getBoundingClientRect().width;\n      const thumbWidth = parseInt(getComputedStyle(this)\n          .getPropertyValue('--thumb-w')) || 32;\n      const p = (value - this.control.min)\n          / (this.control.max - this.control.min);\n      this.labelElem.style.left = `${p * cWidth - ((p - .5) * thumbWidth + (p - .5) * 4)}px`;\n    }\n  }\n  \n  /**\n   * Creates tracking label value;\n   * @return {string}\n   * @private\n   */\n  getLabelText() {\n    return this.labelPrefix + this.control.value + this.labelSuffix;\n  }\n  \n  /**\n   * Create hidden field to pass data to form.\n   * @return {HTMLInputElement}\n   * @private\n   */\n  createOut() {\n    const input = document.createElement('input');\n    input.type = 'hidden';\n    ['value', 'name', 'disabled'].forEach((v) => {\n      if (this[v]) {\n        input[v] = this[v];\n      }\n    });\n    return input;\n  }\n  \n  /**\n   * Creates labels for limits.\n   * @param {('label-limit-min' | 'label-limit-max')} [klass] Name and\n   * classname of the label.\n   */\n  toggleLimLabel(klass) {\n    const el = this.container.querySelector(`.${klass}`);\n    const val = this.getAttribute(klass);\n    if (el && !val) {\n      el.remove();\n    } else if(val) {\n      const label = document.createElement('label');\n      label.classList.add(klass);\n      label.innerText = val;\n      this.container.appendChild(label);\n    }\n  }\n  \n  /**\n   * Accessibility label for slider.\n   * @private\n   */\n  createLabelAccess() {\n    if (this.labelAccess) {\n      const label = document.createElement('label');\n      label.setAttribute('for', DknRangeSlider.RS_ID);\n      label.innerText = this.labelAccess;\n      this.container.appendChild(label);\n    }\n  }\n  \n  /**\n   * Attaches all event handlers to component and it's children.\n   * @private\n   */\n  attachHandlers() {\n    this.control.addEventListener('change', (e) => {\n      this.value = e.target.value;\n      this.field.value = e.target.value ;\n      this.updateLabel(e.target.value);\n    });\n    this.addEventListener('input', (e) => {\n      this.updateLabel(e.target.value);\n    });\n  }\n  \n  /**\n   * Create the ticks elements and build ticks.\n   */\n  createTicks() {\n    if (!this.ticks) {\n      return;\n    }\n    this.ticksElem = document.createElement('div');\n    // this.ticksElem.setAttribute('aria-hidden', 'true');\n    this.ticksElem.classList.add('ticks');\n    for (let i = this.min; i <= this.max; i += this.ticksStep) {\n      const tick = document.createElement('span');\n      tick.innerText = String(i);\n      this.ticksElem.appendChild(tick);\n    }\n    this.container.appendChild(this.ticksElem);\n  }\n  \n  \n  /**\n   * Removes ticks.\n   */\n  removeTicks() {\n    if (this.ticksElem) {\n      this.container.removeChild(this.ticksElem);\n      delete this.ticksElem;\n    }\n  }\n  \n  /**\n   * Web-component's attributeChangedCallback life cycle hook.\n   * @param {string} name\n   * @param {string} oldValue\n   * @param {string} newValue\n   * @callback\n    */\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (!this.connected || oldValue === newValue) {\n      return;\n    }\n    switch (name) {\n      case 'name':\n        this.field.name = newValue;\n        break;\n      case 'disabled':\n        this.field.disabled = this.disabled;\n        this.control.disabled = this.disabled;\n        break;\n      case 'label-value':\n        if (newValue == null) {\n          this.labelElem.remove();\n          this.labelValueElem = null;\n        } else {\n          this.createLabel();\n          this.updateLabel(this.value);\n        }\n        break;\n      case 'label-limit-min':\n      case 'label-limit-max':\n        this.toggleLimLabel(name);\n        break;\n      case 'ticks':\n        if (newValue == null) {\n          this.removeTicks();\n        } else {\n          this.createTicks();\n        }\n        break;\n      case 'ticks-step':\n        this.removeTicks();\n        this.createTicks();\n        break;\n      default:\n        if (newValue == null) {\n          this.control.removeAttribute(name);\n        } else {\n          this.control[name] = newValue;\n        }\n        break;\n    }\n  }\n  \n  /**\n   * Web-component's connected life cycle hook.\n   * @callback\n  */\n  connectedCallback() {\n    if (this.connected) {\n      return;\n    }\n    this.root = this.attachShadow({mode: 'open'});\n    this.styleElem = document.createElement('style');\n    this.styleElem.innerHTML = `{{CSS}}`;\n    \n    // create markup and content\n    this.root.appendChild(this.styleElem);\n    this.control = this.createCtrl();\n    this.control.id = DknRangeSlider.RS_ID;\n    this.field = this.createOut();\n    this.container = document.createElement('div');\n    this.container.classList.add('container');\n    this.container.appendChild(this.control);\n    this.createLabelAccess();\n    this.root.appendChild(this.container);\n  \n    this.createTicks();\n  \n    this.appendChild(this.field);\n    this.toggleLimLabel('label-limit-min');\n    this.toggleLimLabel('label-limit-max');\n  \n    this.createLabel();\n    // Trigger animation\n    setTimeout(() => this.updateLabel(this.control.value));\n    \n    this.resizeHandler = () => {\n      this.updateLabel(this.control.value);\n    };\n    window.addEventListener('resize', this.resizeHandler);\n    window.addEventListener('orientationchange', this.resizeHandler);\n  \n    this.attachHandlers();\n  \n    this.connected = true;\n  }\n  \n  disconnectedCallback() {\n    window.removeEventListener('resize', this.resizeHandler);\n    window.removeEventListener('orientationchange', this.resizeHandler);\n  }\n}\n\n/* istanbul ignore else */\nwindow.customElements.define('dkn-range-slider', DknRangeSlider);\n"]}